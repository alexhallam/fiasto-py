name: Build and Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish to PyPI'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: read

jobs:
  # Start with just Linux x86_64 to debug issues
  linux-x86_64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Debug - List project files
        run: |
          echo "=== Project structure ==="
          find . -name "*.toml" -o -name "*.py" -o -name "*.rs" | head -20
          echo "=== pyproject.toml ==="
          cat pyproject.toml || echo "No pyproject.toml found"
          echo "=== Cargo.toml ==="
          cat Cargo.toml || echo "No Cargo.toml found"
        
      - name: Build wheel (with verbose output)
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist --verbose
          sccache: 'true'
          manylinux: auto
          
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-x86_64
          path: dist

  # Only run other platforms if Linux x86_64 succeeds
  linux-other:
    runs-on: ubuntu-latest
    needs: [linux-x86_64]
    strategy:
      matrix:
        target: [x86, aarch64, armv7]
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
          
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: dist

  windows:
    runs-on: windows-latest
    needs: [linux-x86_64]
    strategy:
      fail-fast: false
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          architecture: ${{ matrix.target }}
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target == 'x86' && 'i686-pc-windows-msvc' || 'x86_64-pc-windows-msvc' }}
          
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target == 'x86' && 'i686' || 'x86_64' }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.runner }}
    needs: [linux-x86_64]
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-12
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}-apple-darwin
          
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/') || github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish == 'true')"
    needs: [linux-x86_64, linux-other, windows, macos, sdist]
    environment:
      name: pypi
      url: https://pypi.org/p/fiasto-py
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
          
      - name: List artifacts
        run: ls -la dist/
        
      - name: Publish to PyPI
        if: env.PYPI_API_TOKEN != ''
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing dist/*
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
          
      - name: Publish to PyPI (Trusted Publishing)
        if: env.PYPI_API_TOKEN == ''
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true
        env:
          PYPI_API_TOKEN: ""
          
      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            dist/*.whl
            dist/*.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Test Build
    runs-on: ubuntu-latest
    needs: [linux-x86_64, sdist]
    if: "!startsWith(github.ref, 'refs/tags/') && github.event_name != 'release' && github.event.inputs.publish != 'true'"
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
          
      - name: List artifacts
        run: ls -la dist/
        
      - name: Test installation
        run: |
          python -m pip install --upgrade pip
          # Test installing a Linux wheel if available
          if ls dist/*linux_x86_64*.whl 1> /dev/null 2>&1; then
            echo "Installing Linux x86_64 wheel..."
            pip install dist/*linux_x86_64*.whl
            python -c "import fiasto_py; print('Package installed successfully')"
            python -c "import fiasto_py; print('Testing parse_formula...'); result = fiasto_py.parse_formula('y ~ x'); print('Success!')"
          else
            echo "No x86_64 wheel found, trying sdist..."
            if ls dist/*.tar.gz 1> /dev/null 2>&1; then
              # This will likely fail without Rust, but let's try
              pip install dist/*.tar.gz || echo "Sdist installation failed (expected without Rust)"
            fi
          fi
