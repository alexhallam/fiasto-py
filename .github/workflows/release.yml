name: release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: Git tag (e.g., v0.1.3). If empty, will use current ref.
        required: false

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write

env:
  # Ensure stable reproducible builds across runners
  CARGO_TERM_COLOR: always
  PYO3_USE_ABI3_FORWARD_COMPATIBILITY: "1"

jobs:
  linux:
    name: Build Linux (manylinux wheels)
    runs-on: ubuntu-22.04
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          manylinux: auto
          rust-toolchain: stable
          args: --release --out dist --compatibility manylinux_2_28

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux
          path: dist/*

  macos-arm64:
    name: Build macOS (arm64)
    runs-on: macos-14
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Build wheels (arm64)
        uses: PyO3/maturin-action@v1
        with:
          args: --release --out dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-arm64
          path: dist/*

  macos-x86_64:
    name: Build macOS (x86_64)
    # Use Intel runner for native x86_64 wheels. Avoid cross-compile to prevent timeouts.
    runs-on: macos-13
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Build wheels (x86_64)
        uses: PyO3/maturin-action@v1
        with:
          args: --release --out dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-x86_64
          path: dist/*

  windows:
    name: Build Windows (x86_64)
    runs-on: windows-2022
    timeout-minutes: 35
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Build wheels (win)
        uses: PyO3/maturin-action@v1
        with:
          args: --release --out dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows
          path: dist/*

  sdist:
    name: Build sdist
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*

  release:
    name: Create GitHub Release & Publish to PyPI (optional)
    needs: [linux, macos-arm64, macos-x86_64, windows, sdist]
    runs-on: ubuntu-22.04
    if: ${{ always() }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag || github.ref_name }}
          files: dist/**
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Optional PyPI publish if token present
      - name: Publish to PyPI
        if: ${{ secrets.PYPI_API_TOKEN != '' }}
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --skip-existing dist/*
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

env:
  # Keep for future abi3 usage (if you enable abi3 in Cargo.toml).
  PYO3_USE_ABI3_FORWARD_COMPATIBILITY: 1

jobs:
  build-linux:
    name: Build Linux (manylinux_2_17 x86_64; CPython only)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Build only against CPython interpreters in the manylinux image.
      # This avoids PyPy 3.11 which pyo3 0.21.x doesn't support.
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          command: build
          manylinux: "2_17"  # PEP 600 tag (single platform tag)
          args: >-
            --release
            -i /opt/python/cp38-cp38/bin/python
            -i /opt/python/cp39-cp39/bin/python
            -i /opt/python/cp310-cp310/bin/python
            -i /opt/python/cp311-cp311/bin/python
            -i /opt/python/cp312-cp312/bin/python
            -i /opt/python/cp313-cp313/bin/python
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux
          path: target/wheels/*

  build-macos-arm64:
    name: Build macOS (arm64)
    runs-on: macos-15-arm64
    steps:
      - uses: actions/checkout@v4
      - name: Build wheels (arm64)
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: >-
            --release
            --find-interpreter
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-arm64
          path: target/wheels/*

  build-macos-x86_64:
    name: Build macOS (x86_64 via cross-compile)
    runs-on: macos-15-arm64
    steps:
      - uses: actions/checkout@v4
      - name: Add Rust target x86_64-apple-darwin
        run: rustup target add x86_64-apple-darwin
      - name: Build wheels (x86_64)
        uses: PyO3/maturin-action@v1
        with:
          command: build
          target: x86_64-apple-darwin
          args: >-
            --release
            --find-interpreter
        env:
          # Reasonable baseline; tweak if you need older macOS support.
          MACOSX_DEPLOYMENT_TARGET: 11.0
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-x86_64
          path: target/wheels/*

  build-windows:
    name: Build Windows (x86_64)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: >-
            --release
            --find-interpreter
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows
          path: target/wheels/*

  build-sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: target/wheels/*.tar.gz

  release:
    name: Create GitHub Release & Publish to PyPI
    runs-on: ubuntu-latest
    needs:
      - build-linux
      - build-macos-arm64
      - build-macos-x86_64
      - build-windows
      - build-sdist
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-collect

      - name: Move artifacts to dist/
        run: |
          mkdir -p dist
          find dist-collect -name "*.whl" -exec mv {} dist/ \;
          find dist-collect -name "*.tar.gz" -exec mv {} dist/ \;
          ls -l dist

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --skip-existing dist/*
        env:
          MATURIN_USERNAME: __token__
          MATURIN_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
          PYO3_USE_ABI3_FORWARD_COMPATIBILITY: 1
