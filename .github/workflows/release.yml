name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  PYO3_USE_ABI3_FORWARD_COMPATIBILITY: 1

jobs:
  build:
    name: Build wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ steps.set-target.outputs.target }}

      - name: Set target
        id: set-target
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "target=x86_64-pc-windows-msvc" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            echo "target=x86_64-apple-darwin" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            echo "target=x86_64-unknown-linux-gnu" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Install maturin
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ steps.set-target.outputs.target }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ steps.set-target.outputs.target }}
          command: build
          args: --release
        env:
          PYO3_USE_ABI3_FORWARD_COMPATIBILITY: 1

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: target/wheels/

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install maturin
        uses: PyO3/maturin-action@v1

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: target/wheels/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, build-sdist]
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Move artifacts to dist
        run: |
          mkdir -p dist
          find . -name "*.whl" -exec mv {} dist/ \;
          find . -name "*.tar.gz" -exec mv {} dist/ \;

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --skip-existing
        env:
          PYO3_USE_ABI3_FORWARD_COMPATIBILITY: 1
          MATURIN_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
